/* eslint-disable @typescript-eslint/no-explicit-any */
// Typed API Client, based on TanStack useQuery and useMutation
// Integrates with OpenAPI specs using @hey-api/openapi-ts

import axiosInstance from '@/network/axios'
import { useQuery, type UseQueryReturnType, type UseQueryOptions } from '@tanstack/vue-query'
import {
  useMutation,
  type UseMutationReturnType,
  type UseMutationOptions,
} from '@tanstack/vue-query'
import type { AxiosError } from 'axios'
import type { Ref } from 'vue'

/**
 * Attaches the axios singleton to an OpenAPI Client/SDK,
 * autogenerated by @hey-api/openapi-ts.
 * You need to call this during application startup to have a working OpenAPI Client
 * E.g if you're running : npx @hey-api/openapi-ts --input .path/to/openapi.yaml --output ./src/openapi
 * Then you will have your generated code in @/openapi, and then you can :
 * import { client } from '@/openapi/client.gen'
 * import { typedApiClient } from '@nside/wefa/network'
 * typedApiClient.setupOpenApiClient(client)
 * @param client Auto-generated OpenAPI client
 */
// We can't really type the client arg because the type itself is codegen so it might not exist
function setupOpenApiClient(client: any) {
  client.setConfig({
    axios: axiosInstance,
  })
}

// Type to extract the options parameter type from your callable
type ExtractQueryOptionsType<T> = T extends (options: infer O) => any ? O : never

// Type to extract the response data type from your callable's return
type ExtractQueryDataType<T> = T extends (options: any) => Promise<{ data: infer D }>
  ? D
  : T extends (options: any) => { data: infer D }
    ? D
    : never

/**
 * Wraps a auto-generated OpenAPI query with TanStack useQuery,
 * providing many state-management helpers around the query
 * @param callable Auto-generated function from an GET endpoint, using @hey-api/openapi-ts
 * @param options reactive options expected by and passed to the callable, e.g to build the URL. If ref(undefined) is provided, the query is not called
 * @param queryOptions TanStack useQuery options : https://tanstack.com/query/v5/docs/framework/vue/reference/useQuery
 * @returns TanStack useQuery return : https://tanstack.com/query/v5/docs/framework/vue/reference/useQuery
 */
export function query<
  TCallable extends (options: any) => any,
  TOptions extends ExtractQueryOptionsType<TCallable>,
  TData extends ExtractQueryDataType<TCallable>,
>(
  callable: TCallable,
  options: Ref<TOptions | undefined>,
  queryOptions?: Omit<UseQueryOptions<TData>, 'queryKey' | 'queryFn'>
): UseQueryReturnType<TData, Error> {
  const uq = useQuery({
    // Handles caching and automatic refetch when options change
    queryKey: [callable.name, options],
    // Query call
    queryFn: async () => {
      if (!options.value) {
        return undefined
      }
      const result = await callable(options.value)
      if (result && result.isAxiosError) {
        throw result
      }
      return result.data
    },
    // Query not called if options is undefined
    enabled: () => {
      return !!options.value
    },
    // Additional options passed to TanStack
    ...queryOptions,
  })
  return uq
}

// Type to extract the options parameter type from your callable
type ExtractMutationOptionsType<T> = T extends (options: infer O) => any ? O : never

// Type to extract the response data type from your callable's return
type ExtractMutationDataType<T> = T extends (options: any) => Promise<{ data: infer D }>
  ? D
  : T extends (options: any) => { data: infer D }
    ? D
    : never

/**
 * Wraps an auto-generated OpenAPI mutation (POST/PUT/DELETE) with TanStack useMutation,
 * providing state-management helpers and lifecycle hooks for the mutation.
 * @param callable Auto-generated function from a mutation endpoint (POST/PUT/DELETE), using @hey-api/openapi-ts
 * @param mutationOptions TanStack useMutation options: https://tanstack.com/query/v5/docs/framework/vue/reference/useMutation
 * @returns TanStack useMutation return: https://tanstack.com/query/v5/docs/framework/vue/reference/useMutation
 *
 * Example usage:
 *   const mutation = typedApiClient.mutation(postHello, {
 *     onSuccess: (data) => { ... },
 *     onError: (error) => { ... }
 *   })
 *   mutation.mutate(options)
 */
export function mutation<
  TCallable extends (options: any) => any,
  TOptions extends ExtractMutationOptionsType<TCallable>,
  TData extends ExtractMutationDataType<TCallable>,
>(
  callable: TCallable,
  mutationOptions?: Omit<UseMutationOptions<TData, AxiosError, TOptions>, 'mutationFn'>
): UseMutationReturnType<TData, AxiosError, TOptions, unknown> {
  const um = useMutation<TData, AxiosError, TOptions, unknown>({
    mutationFn: async (options: TOptions) => {
      const result = await callable(options)
      if (result && result.isAxiosError) {
        throw result
      }
      return result.data
    },
    ...mutationOptions,
  })
  return um
}

export default {
  query,
  mutation,
  setupOpenApiClient,
}
