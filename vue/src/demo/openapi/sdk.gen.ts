// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client'
import type {
  GetHello1Data,
  GetHello1Responses,
  GetHello2Data,
  GetHello2Responses,
  GetHello3Data,
  GetHello3Responses,
  PostHello1Data,
  PostHello1Responses,
  PostHello2Data,
  PostHello2Responses,
  PostHello3Data,
  PostHello3Responses,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Basic GET (no input, no output)
 * @param options
 */
export const getHello1 = <ThrowOnError extends boolean = false>(
  options?: Options<GetHello1Data, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetHello1Responses, unknown, ThrowOnError>({
    responseType: 'json',
    url: '/basic-get',
    ...options,
  })
}

/**
 * Simple GET (simple input/output)
 * @param options
 */
export const getHello2 = <ThrowOnError extends boolean = false>(
  options: Options<GetHello2Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetHello2Responses, unknown, ThrowOnError>({
    responseType: 'json',
    url: '/simple-get',
    ...options,
  })
}

/**
 * Complex GET (complex input/output)
 * @param options
 */
export const getHello3 = <ThrowOnError extends boolean = false>(
  options: Options<GetHello3Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetHello3Responses, unknown, ThrowOnError>({
    responseType: 'json',
    url: '/complex-get/{userId}',
    ...options,
  })
}

/**
 * Basic POST (no input, no output)
 * @param options
 */
export const postHello1 = <ThrowOnError extends boolean = false>(
  options?: Options<PostHello1Data, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<PostHello1Responses, unknown, ThrowOnError>({
    responseType: 'json',
    url: '/basic-post',
    ...options,
  })
}

/**
 * Simple POST (simple input/output)
 * @param options
 */
export const postHello2 = <ThrowOnError extends boolean = false>(
  options: Options<PostHello2Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PostHello2Responses, unknown, ThrowOnError>({
    responseType: 'json',
    url: '/simple-post',
    ...options,
  })
}

/**
 * Complex POST (complex input/output)
 * @param options
 */
export const postHello3 = <ThrowOnError extends boolean = false>(
  options: Options<PostHello3Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PostHello3Responses, unknown, ThrowOnError>({
    responseType: 'json',
    url: '/complex-post/{itemId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}
