name: Setup Python with uv and install
description: Setup Python via uv, create a local .venv, cache, and install dependencies

inputs:
  python-version:
    description: Python version to use
    required: false
    default: '3.12'
  cache-dependency-path:
    description: Path(s) used to compute cache key (e.g. django/pyproject.toml)
    required: false
    default: 'django/pyproject.toml'
  install-dev:
    description: Install development dependencies using extras ([dev])
    required: false
    default: 'true'
  project-dir:
    description: Directory containing the Python project (pyproject.toml)
    required: false
    default: 'django'

runs:
  using: composite
  steps:
    - name: Setup uv (Python toolchain)
      uses: astral-sh/setup-uv@v4
      with:
        python-version: ${{ inputs.python-version }}
        enable-cache: true
        cache-dependency-glob: ${{ inputs.cache-dependency-path }}

    - name: Create project virtual environment (.venv)
      shell: bash
      run: |
        cd "${{ inputs.project-dir }}"
        uv venv --python "${{ inputs.python-version }}" .venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> "$GITHUB_ENV"
        echo "$PWD/.venv/bin" >> "$GITHUB_PATH"

    - name: Install dependencies (dev)
      if: ${{ inputs.install-dev == 'true' }}
      shell: bash
      run: |
        cd "${{ inputs.project-dir }}"
        uv pip install --python "$VIRTUAL_ENV" -e ".[dev]"

    - name: Install dependencies
      if: ${{ inputs.install-dev != 'true' }}
      shell: bash
      run: |
        cd "${{ inputs.project-dir }}"
        uv pip install --python "$VIRTUAL_ENV" -e "."
